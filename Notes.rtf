{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red92\green38\blue153;\red46\green13\blue110;
\red170\green13\blue145;\red38\green71\blue75;\red196\green26\blue22;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\
1. \
Create CalendarDates Data file. \
	Set its properties data and weak day, init method setting them. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
In ScheduleVC, in viewDidLoad, ask for a current time stamp. Calculate number of days to the end of the month. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 In ScheduleVC, in viewDidLoad, create array of available dates with a 'for' loop. \
\
2. \
Time. \
If todays calDay is chosen, update time collection and show time only available from that point of time. \
\
call for createTimeArr( false ) in viewDidLoad. Then, in 'didSelectItemAt' run check if user have chosen first cell. If yes, call 'createTimeArr( true )'.\
\
3. \
After pressing the "reserve" button a new reservation should be created with: date, time, and party size. \
(duration, title, description - all the same.)\
\
It should be added to [Reservations] array. Then, the segueWithIdentifier is triggered and we will pass that [Reservations] array. \
\
\
\
\
\
4. \
To preserve data, in viewDidLoad( ) call\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0

\f1\fs30 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0  \
        \cf3 NotificationCenter\cf2 .\cf3 default\cf2 .\cf4 addObserver\cf2 (\cf5 self\cf2 , selector: \cf5 #selector\cf2 (\cf6 closeApp\cf2 ), name: \cf3 NSNotification\cf2 .\cf3 Name\cf2 .\cf3 UIApplicationDidEnterBackground\cf2 , object: \cf5 nil\cf2 )\
        \cf3 NotificationCenter\cf2 .\cf3 default\cf2 .\cf4 addObserver\cf2 (\cf5 self\cf2 , selector: \cf5 #selector\cf2 (\cf6 openApp\cf2 ), name: \cf3 NSNotification\cf2 .\cf3 Name\cf2 .\cf3 UIApplicationWillEnterForeground\cf2 , object: \cf5 nil\cf2 )\
        \
\

\f0\fs36 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 in same VC, implement: \

\f1\fs30 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
  \cf5 func\cf2  closeApp() \{\
        \cf4 print\cf2 (\cf7 "Zhenya: closeApp() func was triggered"\cf2 )\
        \cf5 let\cf2  closingTime = \cf3 Date\cf2 ()\
        \cf5 let\cf2  defaults = \cf3 UserDefaults\cf2 .\cf3 standard\cf2 \
        defaults.\cf4 set\cf2 (closingTime, forKey: \cf7 "closing_time"\cf2 )\
    \}\
    \
    \cf5 func\cf2  openApp() \{\
        \cf5 let\cf2  openingTime = \cf3 Date\cf2 ()\
        \cf5 let\cf2  defaults = \cf3 UserDefaults\cf2 .\cf3 standard\cf2 \
        \cf5 let\cf2  closingTime = defaults.\cf4 object\cf2 (forKey: \cf7 "closing_time"\cf2 ) \cf5 as\cf2 ? \cf3 Date\cf2 \
        \cf5 if\cf2  closingTime != \cf5 nil\cf2  \{\
            \cf6 compareTimes\cf2 (openingTime, closingTime!)\
        \}\
    \}\
    \
    \cf5 func\cf2  compareTimes(\cf5 _\cf2  opening: \cf3 Date\cf2 ?, \cf5 _\cf2  closing: \cf3 Date\cf2 ?) \{\
  \
        \cf5 if\cf2  (opening!.\cf3 timeIntervalSinceReferenceDate\cf2  - closing!.\cf3 timeIntervalSinceReferenceDate\cf2 ) > \cf8 600\cf2  \{\
            \cf6 resetUI\cf2 ()\
        \}\
    \}\
\

\f0\fs36 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 if its more than 10 min, we simply reset the UI. Otherwise data will be there for ever. \
\
\
\
\
}